{"version":3,"sources":["actions/index.js","reducers/index.js","reducers/visibilityFilterReducer.js","reducers/todoReducer.js","components/Link.js","containers/FilterLink.js","components/Filters.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/App.js","index.js","storage/index.js"],"names":["VisibilityFilters","nextTodoId","rootReducer","combineReducers","visibilityFilter","state","action","type","filter","todos","id","text","completed","_","map","todo","Object","assign","Link","Nav","Item","eventKey","this","props","children","onClick","disabled","active","React","Component","FilterLink","connect","ownProps","dispatch","Filters","variant","defaultActiveKey","AddTodo","input","Card","className","Body","onSubmit","e","preventDefault","value","trim","ref","node","Button","Todo","style","textDecoration","removeClick","TodoList","Table","key","onTodoClick","getVisibleTodos","t","VisibleTodoList","toggleTodo","removeTodo","App","Navbar","bg","Brand","Container","persistedState","serializedState","localStorage","getItem","JSON","parse","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","render","document","getElementById"],"mappings":"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","file":"static/js/main.1829a41d.chunk.js","sourcesContent":["export const ADD_TODO = \"ADD_TODO\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\nexport const SET_VISIBILITY_FILTER = \"SET_VISIBILITY_FILTER\";\r\n\r\n\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: \"SHOW_ALL\",\r\n  SHOW_COMPLETED: \"SHOW_COMPLETED\",\r\n  SHOW_ACTIVE: \"SHOW_ACTIVE\"\r\n}\r\n\r\n\r\nlet nextTodoId = 0\r\nexport function addTodo(text) {\r\n  return {\r\n    type: ADD_TODO,\r\n    id: nextTodoId++,\r\n    text\r\n  }\r\n}\r\n\r\nexport function removeTodo(id) {\r\n  return {\r\n    type: REMOVE_TODO,\r\n    id\r\n  }\r\n}\r\n\r\nexport function toggleTodo(id) {\r\n  return {\r\n    type: TOGGLE_TODO,\r\n    id\r\n  }\r\n}\r\n\r\nexport function setVisibilityFilter(filter) {\r\n  return {\r\n    type: SET_VISIBILITY_FILTER,\r\n    filter\r\n  }\r\n}","import { combineReducers } from 'redux'\r\nimport {todoReducer} from './todoReducer'\r\nimport {visibilityFilterReducer} from './visibilityFilterReducer'\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n  visibilityFilter: visibilityFilterReducer,\r\n  todos: todoReducer,\r\n})","import {VisibilityFilters, SET_VISIBILITY_FILTER} from '../actions'\r\n\r\nexport function visibilityFilterReducer(state = VisibilityFilters.SHOW_ALL, action) {\r\n  switch (action.type) {\r\n    case SET_VISIBILITY_FILTER:\r\n      return action.filter\r\n    default:\r\n      return state\r\n  }\r\n}","import{ADD_TODO, REMOVE_TODO, TOGGLE_TODO} from '../actions/index'\r\n\r\nexport function todoReducer(state = [], action) {\r\n  switch (action.type) {\r\n    case ADD_TODO:\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          completed: false\r\n        }\r\n      ]\r\n    case REMOVE_TODO:\r\n      return state.filter((_, id) => action.id !== id)\r\n    case TOGGLE_TODO:\r\n      return state.map((todo) => {\r\n        if (todo.id === action.id) {\r\n          return Object.assign({}, todo, {\r\n            completed: !todo.completed\r\n          })\r\n        }\r\n        return todo\r\n      })\r\n    default:\r\n      return state\r\n  }\r\n}","import React from \"react\"\r\nimport PropTypes from 'prop-types'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\n\r\nclass Link extends React.Component {\r\n  render() {\r\n    return (\r\n\r\n      <Nav.Item>\r\n        <Nav.Link eventKey={this.props.children} onClick={this.props.onClick} disabled={this.props.active}>\r\n          {this.props.children}\r\n        </Nav.Link>\r\n      </Nav.Item>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nLink.propTypes = {\r\n  active: PropTypes.bool.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  onClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Link\r\n\r\n","import { connect } from 'react-redux'\r\nimport { setVisibilityFilter } from '../actions/index'\r\nimport Link from '../components/Link'\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  return {\r\n    active: ownProps.filter === state.visibilityFilter\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch, ownProps) {\r\n  return {\r\n    onClick: () => {\r\n      dispatch(setVisibilityFilter(ownProps.filter))\r\n    }\r\n  }\r\n}\r\n\r\nconst FilterLink = connect(mapStateToProps, mapDispatchToProps)(Link)\r\n\r\nexport default FilterLink\r\n","import React from \"react\"\r\nimport FilterLink from '../containers/FilterLink'\r\nimport { VisibilityFilters } from '../actions/index'\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nclass Filters extends React.Component {\r\n  render() {\r\n    return (\r\n      <Nav variant=\"tabs\" defaultActiveKey=\"All\">\r\n        <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\r\n        <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\r\n        <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\r\n      </Nav>\r\n    )\r\n  }\r\n}\r\nexport default Filters\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addTodo } from '../actions/index'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nclass AddTodo extends React.Component {\r\n  \r\nrender(){\r\n  let input\r\n\r\n  return(\r\n    <Card className=\"mb-5 mt-2\">\r\n      <Card.Body>\r\n      <form onSubmit={e => {\r\n        e.preventDefault()\r\n        if(!input.value.trim()) {\r\n          return\r\n        }\r\n        this.props.dispatch(addTodo(input.value))\r\n        input.value = ''\r\n      }}\r\n      >\r\n        <input ref={node => {\r\n          input = node\r\n        }}\r\n        />\r\n        <Button className=\"ml-5\" type=\"submit\">Add Task</Button>\r\n      </form>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}}\r\n\r\nexport default connect() (AddTodo)\r\n\r\n","import React from \"react\"\r\nimport PropTypes from 'prop-types'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nclass Todo extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td>\r\n          {this.props.id}\r\n        </td>\r\n\r\n        <td>\r\n          <span style={{\r\n            textDecoration: this.props.completed\r\n              ? 'line-through' : 'none'\r\n          }} onClick={this.props.onClick}>\r\n            {this.props.text}\r\n          </span>\r\n        </td>\r\n\r\n        <td>\r\n          <Button variant=\"danger\" onClick={this.props.removeClick}>remove</Button>\r\n        </td>\r\n\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n\r\nTodo.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  completed: PropTypes.bool.isRequired,\r\n  text: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Todo","import React from \"react\"\r\nimport PropTypes from 'prop-types'\r\nimport Todo from './Todo'\r\nimport Table from 'react-bootstrap/Table'\r\n\r\nclass TodoList extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Table>\r\n        <thead>\r\n          <tr>\r\n            <th> ID</th>\r\n            <th>Task</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.props.todos.map((todo) => (\r\n            <Todo key={todo.id} {...todo}\r\n              onClick={() => this.props.onTodoClick(todo.id)}\r\n              removeClick={() => this.props.removeClick(todo.id)} />\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    )\r\n  }\r\n}\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      completed: PropTypes.bool.isRequired,\r\n      text: PropTypes.string.isRequired\r\n    }).isRequired\r\n  ).isRequired,\r\n  onTodoClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList\r\n","import {connect} from 'react-redux'\r\nimport{toggleTodo} from '../actions/index'\r\nimport TodoList from '../components/TodoList'\r\nimport {removeTodo} from '../actions/index'\r\n\r\nfunction getVisibleTodos(todos, filter) {\r\n  switch (filter) {\r\n    case 'SHOW_COMPLETED':\r\n      return todos.filter(t => t.completed)\r\n    case 'SHOW_ACTIVE':\r\n      return todos.filter(t =>!t.completed)\r\n    case 'SHOW_ALL':\r\n    default:\r\n      return todos\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onTodoClick: id => {\r\n      dispatch(toggleTodo(id))\r\n    },\r\n    removeClick: id =>{\r\n      dispatch(removeTodo(id))\r\n    }\r\n  }\r\n}\r\n\r\nconst VisibleTodoList = connect(mapStateToProps, mapDispatchToProps)(TodoList)\r\n\r\nexport default VisibleTodoList\r\n\r\n","import React from 'react';\r\nimport Filters from './Filters';\r\nimport AddTodo from '../containers/AddTodo';\r\nimport VisibleTodoList from '../containers/VisibleTodoList';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand>\r\n            Redux Todo\r\n          </Navbar.Brand>\r\n        </Navbar>\r\n        <Container>\r\n          <AddTodo />\r\n          <Filters />\r\n          <VisibleTodoList />\r\n        </Container>\r\n\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport {render} from 'react-dom';\r\nimport {Provider} from 'react-redux'\r\nimport {createStore} from \"redux\"\r\nimport {rootReducer} from './reducers/index'\r\nimport App from './components/App';\r\nimport {loadState, saveState} from './storage'\r\n\r\nconst persistedState = loadState();\r\nconst store =createStore(rootReducer, persistedState);\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState())\r\n})\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n","export function loadState() {\r\n\r\n  const serializedState = localStorage.getItem('state');\r\n  if (!serializedState) {\r\n    return undefined;\r\n  }\r\n  return JSON.parse(serializedState);\r\n};\r\n\r\nexport function saveState(state) {\r\n\r\n  const serializedState = JSON.stringify(state);\r\n  localStorage.setItem('state', serializedState);\r\n} \r\n\r\n"],"sourceRoot":""}